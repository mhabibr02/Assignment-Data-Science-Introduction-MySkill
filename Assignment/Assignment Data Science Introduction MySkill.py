# -*- coding: utf-8 -*-
"""Data Science Introduction MySkill

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GCoOm6htcNhv70JgVGT4qUKB3skSLMwo

# Define The Problems
On April 15, 1912, during her maiden voyage, the widely considered “unsinkable” RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren’t enough lifeboats for everyone on board, resulting in the death of 1502 out of 2224 passengers and crew.

what sorts of people were more likely to survive?

# Data Collection
titanic-case.csv
"""

# import library
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import drive

# read and load dataset
df = pd.read_csv('/content/drive/MyDrive/Course/Datasets/titanic-case.csv')
df.head()

# rename variable
df = df.rename(columns={'PassengerId': 'passenger_id', 'Survived': 'survived', 'Pclass' : 'p_class', 'Name' : 'name',
                        'Sex': 'sex', 'Age': 'age', 'SibSp' : 'sibsp', 'Parch' : 'parch',
                        'Ticket': 'ticket', 'Fare': 'fare', 'Cabin' : 'cabin', 'Embarked' : 'embarked'})
df.head()

"""# Exploratory Data Analysis  """

# summary statistics dataset
df.describe()

# checking for missing values
df.isnull().sum()

# handling missing values in 'age' by filling with the median age
df['age'].fillna(df['age'].median(), inplace=True)
# handling missing values in 'embarked' by filling with the mode
df['embarked'].fillna(df['embarked'].mode()[0], inplace=True)
# handling missing values in 'fare' by filling with the median fare
df['fare'].fillna(df['fare'].median(), inplace=True)
# dropping the 'cabin' column due to a high number of missing values
df.drop(columns=['cabin'], inplace=True)

# checking for missing values again
missing_values_after = df.isnull().sum()
print("\nMissing values in the dataset after handling:")
print(missing_values_after)

# checking for duplicates
duplicates = df.duplicated().sum()
print("\nNumber of duplicates in the dataset:")
print(duplicates)

# dropping duplicates
df.drop_duplicates(inplace=True)

# checking for duplicates again
duplicates_after = df.duplicated().sum()
print("\nNumber of duplicates in the dataset after removing duplicates:")
print(duplicates_after)

# displaying the first few rows dataset
print("\nFirst few rows of the dataset after handling missing values and duplicates:")
print(df.head())

# summary statistics dataset
print("\nSummary statistics of the dataset:")
print(df.describe())

# information about the dataset
print("\nInformation about the dataset:")
print(df.info())

# visualizing the distribution of age and fare
sns.histplot(df['age'].dropna(), bins=30, kde=True)
plt.title('Distribution of Age')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()
sns.histplot(df['fare'].dropna(), bins=30, kde=True)
plt.title('Distribution of Fare')
plt.xlabel('Fare')
plt.ylabel('Frequency')
plt.show()

# visualizing the distribution of survived, p_class, sibsp and parch
sns.countplot(x='survived', data=df)
plt.title('Distribution of Survival')
plt.xlabel('Survived')
plt.ylabel('Count')
plt.show()
sns.countplot(x='p_class', data=df)
plt.title('Distribution of Pasengger Class')
plt.xlabel('Pasengger Class')
plt.ylabel('Count')
plt.show()
sns.countplot(x='sibsp', data=df)
plt.title('Distribution of Sibsp')
plt.xlabel('Sibsp')
plt.ylabel('Count')
plt.show()
sns.countplot(x='parch', data=df)
plt.title('Distribution of Parch')
plt.xlabel('Parch')
plt.ylabel('Count')
plt.show()
sns.countplot(x='embarked', data=df)
plt.title('Distribution of Embarked')
plt.xlabel('Embarked')
plt.ylabel('Count')
plt.show()

# box plot for numerical features
plt.figure(figsize=(12, 6))
sns.boxplot(x='survived', y='age', data=df)
plt.title('Box Plot of Fare by Survival')
plt.xlabel('Survival')
plt.ylabel('Age')
plt.show()
plt.figure(figsize=(12, 6))
sns.boxplot(x='p_class', y='fare', data=df)
plt.title('Box Plot of Fare by Passenger Class')
plt.xlabel('Passenger Class')
plt.ylabel('Fare')
plt.show()

# correlation plot heatmap
# Selecting numerical features for correlation analysis
numerical_features = ['survived', 'p_class', 'age', 'sibsp', 'parch', 'fare']
correlation_matrix = df[numerical_features].corr()
# generating the heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', square=True)
plt.title('Correlation Heatmap of Titanic Dataset Features')
plt.show()